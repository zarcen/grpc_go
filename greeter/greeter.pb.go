// Code generated by protoc-gen-go.
// source: greeter.proto
// DO NOT EDIT!

/*
Package greeter is a generated protocol buffer package.

It is generated from these files:
	greeter.proto

It has these top-level messages:
	SimpleInt
	SimpleDouble
	SimpleString
	Greeting
*/
package greeter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SimpleInt struct {
	Num int32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
}

func (m *SimpleInt) Reset()         { *m = SimpleInt{} }
func (m *SimpleInt) String() string { return proto.CompactTextString(m) }
func (*SimpleInt) ProtoMessage()    {}

type SimpleDouble struct {
	Num float64 `protobuf:"fixed64,1,opt,name=num" json:"num,omitempty"`
}

func (m *SimpleDouble) Reset()         { *m = SimpleDouble{} }
func (m *SimpleDouble) String() string { return proto.CompactTextString(m) }
func (*SimpleDouble) ProtoMessage()    {}

type SimpleString struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *SimpleString) Reset()         { *m = SimpleString{} }
func (m *SimpleString) String() string { return proto.CompactTextString(m) }
func (*SimpleString) ProtoMessage()    {}

type Greeting struct {
	Id       int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Fraction float64 `protobuf:"fixed64,2,opt,name=fraction" json:"fraction,omitempty"`
	Name     string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *Greeting) Reset()         { *m = Greeting{} }
func (m *Greeting) String() string { return proto.CompactTextString(m) }
func (*Greeting) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Greeter service

type GreeterClient interface {
	// Sends a single int
	SendInt(ctx context.Context, in *SimpleInt, opts ...grpc.CallOption) (*SimpleInt, error)
	// Sends a single double(float64)
	SendDouble(ctx context.Context, in *SimpleDouble, opts ...grpc.CallOption) (*SimpleDouble, error)
	// Sends a single string
	SendString(ctx context.Context, in *SimpleString, opts ...grpc.CallOption) (*SimpleString, error)
	// Sends a Greeting message (int, double, string)
	SendGreeting(ctx context.Context, in *Greeting, opts ...grpc.CallOption) (*Greeting, error)
	// A server-to-client streaming RPC.
	ServerStreaming(ctx context.Context, in *Greeting, opts ...grpc.CallOption) (Greeter_ServerStreamingClient, error)
	// A client-to-server streaming RPC.
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientStreamingClient, error)
	// A Bidirectional streaming RPC.
	BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (Greeter_BidirectionalStreamingClient, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SendInt(ctx context.Context, in *SimpleInt, opts ...grpc.CallOption) (*SimpleInt, error) {
	out := new(SimpleInt)
	err := grpc.Invoke(ctx, "/greeter.Greeter/SendInt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SendDouble(ctx context.Context, in *SimpleDouble, opts ...grpc.CallOption) (*SimpleDouble, error) {
	out := new(SimpleDouble)
	err := grpc.Invoke(ctx, "/greeter.Greeter/SendDouble", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SendString(ctx context.Context, in *SimpleString, opts ...grpc.CallOption) (*SimpleString, error) {
	out := new(SimpleString)
	err := grpc.Invoke(ctx, "/greeter.Greeter/SendString", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SendGreeting(ctx context.Context, in *Greeting, opts ...grpc.CallOption) (*Greeting, error) {
	out := new(Greeting)
	err := grpc.Invoke(ctx, "/greeter.Greeter/SendGreeting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ServerStreaming(ctx context.Context, in *Greeting, opts ...grpc.CallOption) (Greeter_ServerStreamingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[0], c.cc, "/greeter.Greeter/ServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_ServerStreamingClient interface {
	Recv() (*Greeting, error)
	grpc.ClientStream
}

type greeterServerStreamingClient struct {
	grpc.ClientStream
}

func (x *greeterServerStreamingClient) Recv() (*Greeting, error) {
	m := new(Greeting)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientStreamingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[1], c.cc, "/greeter.Greeter/ClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterClientStreamingClient{stream}
	return x, nil
}

type Greeter_ClientStreamingClient interface {
	Send(*Greeting) error
	CloseAndRecv() (*Greeting, error)
	grpc.ClientStream
}

type greeterClientStreamingClient struct {
	grpc.ClientStream
}

func (x *greeterClientStreamingClient) Send(m *Greeting) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterClientStreamingClient) CloseAndRecv() (*Greeting, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Greeting)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (Greeter_BidirectionalStreamingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[2], c.cc, "/greeter.Greeter/BidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterBidirectionalStreamingClient{stream}
	return x, nil
}

type Greeter_BidirectionalStreamingClient interface {
	Send(*Greeting) error
	Recv() (*Greeting, error)
	grpc.ClientStream
}

type greeterBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *greeterBidirectionalStreamingClient) Send(m *Greeting) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterBidirectionalStreamingClient) Recv() (*Greeting, error) {
	m := new(Greeting)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// Sends a single int
	SendInt(context.Context, *SimpleInt) (*SimpleInt, error)
	// Sends a single double(float64)
	SendDouble(context.Context, *SimpleDouble) (*SimpleDouble, error)
	// Sends a single string
	SendString(context.Context, *SimpleString) (*SimpleString, error)
	// Sends a Greeting message (int, double, string)
	SendGreeting(context.Context, *Greeting) (*Greeting, error)
	// A server-to-client streaming RPC.
	ServerStreaming(*Greeting, Greeter_ServerStreamingServer) error
	// A client-to-server streaming RPC.
	ClientStreaming(Greeter_ClientStreamingServer) error
	// A Bidirectional streaming RPC.
	BidirectionalStreaming(Greeter_BidirectionalStreamingServer) error
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SendInt_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SimpleInt)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GreeterServer).SendInt(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Greeter_SendDouble_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SimpleDouble)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GreeterServer).SendDouble(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Greeter_SendString_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SimpleString)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GreeterServer).SendString(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Greeter_SendGreeting_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Greeting)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GreeterServer).SendGreeting(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Greeter_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Greeting)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).ServerStreaming(m, &greeterServerStreamingServer{stream})
}

type Greeter_ServerStreamingServer interface {
	Send(*Greeting) error
	grpc.ServerStream
}

type greeterServerStreamingServer struct {
	grpc.ServerStream
}

func (x *greeterServerStreamingServer) Send(m *Greeting) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).ClientStreaming(&greeterClientStreamingServer{stream})
}

type Greeter_ClientStreamingServer interface {
	SendAndClose(*Greeting) error
	Recv() (*Greeting, error)
	grpc.ServerStream
}

type greeterClientStreamingServer struct {
	grpc.ServerStream
}

func (x *greeterClientStreamingServer) SendAndClose(m *Greeting) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterClientStreamingServer) Recv() (*Greeting, error) {
	m := new(Greeting)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_BidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).BidirectionalStreaming(&greeterBidirectionalStreamingServer{stream})
}

type Greeter_BidirectionalStreamingServer interface {
	Send(*Greeting) error
	Recv() (*Greeting, error)
	grpc.ServerStream
}

type greeterBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *greeterBidirectionalStreamingServer) Send(m *Greeting) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterBidirectionalStreamingServer) Recv() (*Greeting, error) {
	m := new(Greeting)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greeter.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInt",
			Handler:    _Greeter_SendInt_Handler,
		},
		{
			MethodName: "SendDouble",
			Handler:    _Greeter_SendDouble_Handler,
		},
		{
			MethodName: "SendString",
			Handler:    _Greeter_SendString_Handler,
		},
		{
			MethodName: "SendGreeting",
			Handler:    _Greeter_SendGreeting_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreaming",
			Handler:       _Greeter_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreaming",
			Handler:       _Greeter_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreaming",
			Handler:       _Greeter_BidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
